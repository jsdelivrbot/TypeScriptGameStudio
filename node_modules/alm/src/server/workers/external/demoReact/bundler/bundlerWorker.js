"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var sw = require("../../../../utils/simpleWorker");
var contract = require("./bundlerContract");
var fs = require("fs");
var webpack = require("webpack");
var Worker;
(function (Worker) {
    var _this = this;
    Worker.start = function (q) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            startLiveBundling(q);
            return [2 /*return*/, {}];
        });
    }); };
})(Worker || (Worker = {}));
// Ensure that the namespace follows the contract
var _checkTypes = Worker;
// run worker
exports.master = sw.runWorker({
    workerImplementation: Worker,
    masterContract: contract.master
}).master;
var lastAttempt = {};
var compilerOptions = {
    "jsx": "react",
    "target": "es5",
    "moduleResolution": "node",
    "experimentalDecorators": true,
    "lib": [
        "es6",
        "dom"
    ]
};
/**
 * Creates a webpack bundle
 */
function startLiveBundling(args) {
    var runCallback = function (err, stats) {
        if (err) {
            console.error("BUNDLING FAILED:", args);
            console.error(err);
            exports.master.bundleStatus({ type: 'error', error: JSON.stringify(err) });
            return;
        }
        exports.master.bundleStatus({ type: 'success' });
        return;
    };
    if (lastAttempt.entryFilePath === args.entryFilePath) {
        exports.master.bundleStatus({ type: 'bundling' });
        lastAttempt.compiler.run(runCallback);
        return;
    }
    if (!fs.existsSync(args.entryFilePath)) {
        /** Webpack ignores this siliently sadly so we need to catch it ourselves */
        var error = "Entry point does not exist: " + args.entryFilePath;
        console.error(error);
        exports.master.bundleStatus({ type: 'error', error: error });
        return;
    }
    var config = {
        devtool: 'source-map',
        entry: {
            alm: __dirname + '/../client/alm.ts',
            index: args.entryFilePath,
        },
        output: {
            filename: args.outputDirPath + "/[name].js"
        },
        resolve: {
            extensions: ['', '.ts', '.tsx', '.js'],
        },
        module: {
            loaders: [
                { test: /\.tsx?$/, loader: 'ts-loader' }
            ]
        },
        cache: false,
        /** Decrease noise */
        stats: {
            hash: false, version: false, timings: false, assets: false,
            chunks: false, modules: false, reasons: false, children: false,
            source: false, publicPath: false, warnings: true,
            /** Errors only */
            errors: true,
            errorDetails: true,
        },
        /**
         * Custom compiler options for demo building.
         * Effectively what would be in each app tsconfig.json
         **/
        ts: {
            compilerOptions: compilerOptions
        }
    };
    var compiler = webpack(config);
    exports.master.bundleStatus({ type: 'bundling' });
    compiler.run(runCallback);
    lastAttempt = {
        compiler: compiler,
        entryFilePath: args.entryFilePath
    };
}
exports.startLiveBundling = startLiveBundling;
