"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var sw = require("../../../../utils/simpleWorker");
var contract = require("./bundlerContract");
var events_1 = require("../../../../../common/events");
var settings_1 = require("../../../../disk/settings");
var mkdirp = require("mkdirp");
var fsu = require("../../../../utils/fsu");
/** Emitted everytime a build completes */
exports.liveDemoBuildComplete = new events_1.TypedEvent();
var Master;
(function (Master) {
    var _this = this;
    Master.bundleStatus = function (q) { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            exports.liveDemoBuildComplete.emit(q);
            console.log(workerPrefix, "Update: " + q.type);
            return [2 /*return*/, {}];
        });
    }); };
})(Master || (Master = {}));
// Ensure that the namespace follows the contract
var _checkTypes = Master;
// launch worker
var _a = sw.startWorker({
    workerPath: __dirname + '/bundlerWorker',
    workerContract: contract.worker,
    masterImplementation: Master
}), worker = _a.worker, parent = _a.parent;
function start(config) {
    worker.start(config);
}
exports.start = start;
var workerPrefix = "[DEMO-REACT]";
/**
 * This is where we write our index.html plus app.js
 */
exports.liveDemoFolder = settings_1.appSettingsFolder + '/liveDemoReact';
mkdirp.sync(exports.liveDemoFolder);
/** Our index file name */
var outputFileName = exports.liveDemoFolder + '/index.js';
/** The alm file name */
var outputAlmName = exports.liveDemoFolder + '/alm.js';
/** Our html template file */
fsu.writeFile(exports.liveDemoFolder + '/index.html', "\n<!DOCTYPE html>\n<html>\n<head>\n    <!-- Standard Meta -->\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n    <title>ALM Live React Demo</title>\n</head>\n<body>\n  <div id=\"root\">\n      <div id=\"waiting-for-render\" style=\"font-family: arial; opacity: 0; transition: opacity 1s;\">\n      ...make sure you call render in your demo file...\n      </div>\n  </div>\n  <script>\n    setTimeout(function(){\n        var waitingForRender = document.getElementById('waiting-for-render');\n        if (waitingForRender){ waitingForRender.style.opacity = \"1\"; }\n    }, 2000);\n  </script>\n  <script type=\"text/javascript\" src=\"./alm.js\"></script>\n  <script type=\"text/javascript\" src=\"./index.js\"></script>\n</body>\n</html>\n");
var ExternalAPI;
(function (ExternalAPI) {
    var _this = this;
    ExternalAPI.currentFilePath = '';
    ExternalAPI.enableLiveDemo = function (_a) {
        var filePath = _a.filePath;
        return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                ExternalAPI.currentFilePath = filePath;
                fsu.writeFile(outputAlmName, "\n        console.log(\"Placeholder alm file while build is in progress\");\n        ");
                fsu.writeFile(outputFileName, "\n        document.getElementById('root').innerHTML = '';\n        console.log(\"Placeholder index file while build is in progress\");\n        ");
                start({
                    entryFilePath: filePath,
                    outputDirPath: exports.liveDemoFolder,
                });
                console.log(workerPrefix, "Input: " + filePath);
                return [2 /*return*/, {}];
            });
        });
    };
    ExternalAPI.disableLiveDemo = function () {
        // if (executor) {
        //     clearLiveDemo.emit({});
        //     executor.dispose();
        //     executor = undefined;
        //     currentFilePath = '';
        // }
        return Promise.resolve({});
    };
})(ExternalAPI = exports.ExternalAPI || (exports.ExternalAPI = {}));
