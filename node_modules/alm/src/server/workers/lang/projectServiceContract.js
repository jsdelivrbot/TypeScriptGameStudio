"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// API provided by the worker (language tools)
exports.worker = {
    echo: {},
    fileEdited: {},
    fileChangedOnDisk: {},
    fileSaved: {},
    // Project Service stuff
    getCompletionsAtPosition: {},
    getCompletionEntryDetails: {},
    quickInfo: {},
    getRenameInfo: {},
    getDefinitionsAtPosition: {},
    getDoctorInfo: {},
    getReferences: {},
    formatDocument: {},
    formatDocumentRange: {},
    getNavigateToItems: {},
    getNavigateToItemsForFilePath: {},
    getDependencies: {},
    getAST: {},
    getQuickFixes: {},
    applyQuickFix: {},
    getSemanticTree: {},
    getOccurrencesAtPosition: {},
    getFormattingEditsAfterKeystroke: {},
    removeUnusedImports: {},
    /** Documentation browser */
    getTopLevelModuleNames: {},
    getUpdatedModuleInformation: {},
    /** Uml diagram */
    getUmlDiagramForFile: {},
    /** tsFlow */
    getFlowRoots: {},
    /** live analysis */
    getLiveAnalysis: {},
    // Used to tell the worker about what project it should work on
    // Note: The project validation / expansion happens locally. Only the hard stuff of *analysis* is done by the worker
    // This makes the worker bit more host agnostic
    setActiveProjectConfigDetails: {},
    /** Build */
    build: {},
    getJSOutputStatus: {},
};
// API provided by master (web server)
exports.master = {
    sync: {},
    getFileContents: {},
    getOpenFilePaths: {},
    // Sinks for important events
    receiveErrorCacheDelta: {},
    receiveFileOutputStatusUpdate: {},
    receiveCompleteOutputStatusCacheUpdate: {},
    receiveLiveBuildResults: {},
    receiveIncrementallyAddedFile: {},
    receiveWorking: {},
};
