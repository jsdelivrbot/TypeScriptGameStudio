"use strict";
/**
 * Stuff from TypeScript Dir
 */
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
/** A constant pointing you to the TypeScript dir */
exports.typescriptDirectory = path.dirname(require.resolve('typescript')).split('\\').join('/');
/** Tells you if a filePath is inside the TypeScript dir (most likely some lib file) */
exports.isFileInTypeScriptDir = function (filePath) { return filePath.startsWith(exports.typescriptDirectory); };
/** Returns you the filePath of a fileName from the TypeScript folder */
function fileFromLibFolder(fileName) {
    return path.join(exports.typescriptDirectory, fileName).split('\\').join('/');
}
/** From the compiler's commandLineParser we find the `lib` to `fileName` mapping */
var libOption = ts.optionDeclarations.find(function (x) { return x.name == "lib"; });
var libToFileNameMap = libOption.element.type;
/** Based on the compiler options returns you the lib files that should be included */
exports.getDefaultLibFilePaths = function (options) {
    if (options.noLib) {
        return [];
    }
    if (options.lib) {
        /**
         * Note: this might need to be more fancy at some point.
         *  E.g. user types `es6.array` but we need to get `es2015.array`
         */
        return options.lib.map(function (lib) { return fileFromLibFolder(libToFileNameMap.get(lib)); });
    }
    return [fileFromLibFolder(ts.getDefaultLibFileName(options))];
};
