"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CommonEditorRegistry = monaco.CommonEditorRegistry;
var EditorAction = monaco.EditorAction;
var KeyMod = monaco.KeyMod;
var KeyCode = monaco.KeyCode;
var EditorContextKeys = monaco.EditorContextKeys;
/**
 * Format document on selection based on cursor
 */
var FormatBetterAction = (function (_super) {
    __extends(FormatBetterAction, _super);
    function FormatBetterAction() {
        return _super.call(this, {
            id: 'editor.action.formatBetter',
            label: 'Format',
            alias: 'Format',
            precondition: EditorContextKeys.Focus,
            kbOpts: {
                kbExpr: EditorContextKeys.TextFocus,
                primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_L
            }
        }) || this;
    }
    FormatBetterAction.prototype.run = function (accessor, editor) {
        var model = editor.getModel();
        var editorSelection = editor.getSelection();
        if (editorSelection.isEmpty()) {
            var formatDocument = editor.getAction('editor.action.formatDocument');
            return formatDocument.run();
        }
        else {
            var formatSelection = editor.getAction('editor.action.formatSelection');
            return formatSelection.run();
        }
    };
    return FormatBetterAction;
}(EditorAction));
exports.FormatBetterAction = FormatBetterAction;
CommonEditorRegistry.registerEditorAction(new FormatBetterAction());
