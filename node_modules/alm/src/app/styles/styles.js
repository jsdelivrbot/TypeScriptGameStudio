"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var csx = require("../base/csx");
exports.textColor = '#BBB';
exports.errorColor = '#f92672';
exports.warningColor = '#f6d675'; // Color from CodeMirror `lint.css` warning squiggly color
exports.successColor = '#00c990';
exports.highlightColor = "#6edeef";
exports.selectedBackgroundColor = '#444';
exports.monokaiBackgroundColor = '#272822';
exports.monokaiTextColor = "#e6db74"; // The color of strings
/**
 * FA Icon names used in the application
 */
exports.icons = {
    tested: 'futbol-o',
    testedSuite: 'pagelines',
    testedTest: 'leaf',
};
/**
 * A background color that looks nice over the "editor" background black
 */
exports.blackHighlightColor = "#1C1D18";
/**
 * If you expect a child to scroll you need to tell it that I will not give you a scroll bar
 */
exports.someChildWillScroll = {
    overflow: 'hidden'
};
exports.tabHeaderContainer = {
    background: 'grey'
};
exports.tabHeader = {
    fontSize: '.8em',
    fontFamily: 'Roboto, sans-serif',
    fontWeight: 'bold',
    paddingLeft: '10px',
    paddingRight: '10px',
    paddingTop: '5px',
    paddingBottom: '5px',
    background: "rgb(66, 66, 66)",
    color: "rgb(150,150,150)",
    borderLeft: '6px solid rgb(88, 88, 88)',
    cursor: 'pointer',
    userSelect: 'none',
    transition: "color .5s, border-left .5s, background .5s"
};
exports.tabHeaderActive = {
    color: exports.highlightColor,
    borderLeft: "6px solid " + exports.highlightColor,
};
exports.tabHeaderUnsaved = {
    background: "#777",
};
exports.fullWindow = {
    position: 'absolute',
    left: '10px',
    right: '10px',
    top: '10px',
    bottom: '10px',
};
exports.padded1 = {
    padding: '.25rem'
};
exports.padded1TopBottom = {
    paddingTop: exports.padded1.padding,
    paddingBottom: exports.padded1.padding
};
exports.padded1LeftRightBottom = {
    paddingLeft: exports.padded1.padding,
    paddingRight: exports.padded1.padding,
    paddingBottom: exports.padded1.padding
};
exports.padded2 = {
    padding: '.5rem'
};
exports.fullSize = {
    width: '100%',
    height: '100%',
};
var statusBarHeight = 25;
exports.statusBar = {
    height: statusBarHeight + "px",
    color: '#999',
    paddingLeft: '3px',
    paddingRight: '3px',
    fontSize: '12px',
    border: '1px solid #999',
};
exports.statusBarSection = {
    paddingLeft: '3px',
    paddingRight: '3px',
};
exports.statusBarError = {
    color: exports.errorColor
};
exports.statusBarSuccess = {
    color: exports.successColor
};
exports.noSelect = {
    userSelect: 'none',
    cursor: 'default'
};
exports.hand = {
    cursor: 'pointer',
};
exports.noWrap = {
    whiteSpace: 'nowrap',
};
exports.codeFont = {
    fontFamily: 'monospace'
};
var errorsPanel;
(function (errorsPanel) {
    errorsPanel.success = {
        color: exports.successColor
    };
    errorsPanel.main = {
        color: exports.textColor,
        fontFamily: exports.codeFont.fontFamily,
        padding: '6px',
        overflow: 'hidden',
        display: 'flex',
        flexDirection: 'column'
    };
    errorsPanel.headerSection = {
        flexShrink: 0,
        marginBottom: '5px',
    };
    errorsPanel.tooMany = {
        fontSize: '1.2rem',
        fontWeight: 'bolder',
    };
    errorsPanel.filePath = {
        fontSize: '1rem',
        fontWeight: 'bold',
        padding: '8px 8px 8px 0px',
        cursor: exports.hand.cursor,
    };
    errorsPanel.perFileList = {};
    var itemDetailsContainer = csx.extend(exports.hand, {
        padding: '3px'
    });
    errorsPanel.errorDetailsContainer = csx.extend(itemDetailsContainer, {
        borderLeft: '6px solid ' + exports.errorColor
    });
    errorsPanel.warningDetailsContainer = csx.extend(itemDetailsContainer, {
        borderLeft: '6px solid ' + exports.warningColor
    });
    errorsPanel.errorDetailsContent = {
        padding: '3px',
    };
    errorsPanel.errorMessage = {
        paddingBottom: '3px',
        cursor: 'pointer',
        userSelect: 'none',
    };
    errorsPanel.errorPreview = {
        padding: '3px',
        background: 'black',
        border: '2px solid #999',
        cursor: 'pointer',
    };
})(errorsPanel = exports.errorsPanel || (exports.errorsPanel = {}));
/**
 * Used by all our modals
 */
var modal;
(function (modal) {
    /** Keyboard shortcuts */
    modal.keyStrokeStyle = {
        fontSize: '0.9rem',
        background: '#111',
        paddingTop: '1px',
        paddingBottom: '1px',
        paddingLeft: '4px',
        paddingRight: '4px',
        borderRadius: '5px',
        border: '2px solid'
    };
    /** Big input */
    modal.inputStyleBase = {
        backgroundColor: 'rgb(42,42,42)',
        color: 'white',
        outline: 'none',
        padding: '2px',
        fontSize: '1.5rem',
        lineHeight: '2rem',
        fontFamily: 'monospace',
        border: '3px solid #3C3C3C',
        transition: 'border .2s',
        '&:focus': {
            boxShadow: '0px 0px 1px 1px #3C3C3C'
        }
    };
    /** The container around code samples */
    modal.previewContainerStyle = {
        background: exports.tabHeader.background,
        padding: '5px',
    };
})(modal = exports.modal || (exports.modal = {}));
/** Sometimes we need a keyboard input to handle our keyboard events but not be visible in any way */
exports.hiddenInput = {
    height: '0px',
    width: '0px',
    color: 'transparent',
    background: 'transparent',
    position: 'absolute',
    top: '0px'
};
var Input;
(function (Input) {
    Input.inputBlackStyleBase = {
        backgroundColor: '#333',
        color: 'white',
        outline: 'none',
        padding: '2px',
        border: '2px solid #3C3C3C',
        transition: 'border .2s',
        '&:focus': {
            border: '2px solid #0099E0',
            boxShadow: '0px 0px 1px 1px #0099E0'
        }
    };
})(Input = exports.Input || (exports.Input = {}));
/**
 * Some views have tips at the bottom. This for that
 */
var Tip;
(function (Tip) {
    Tip.root = csx.extend({
        color: 'grey',
        lineHeight: '1.5rem',
        fontSize: '.8rem',
    }, exports.padded1);
    Tip.keyboardShortCutStyle = {
        border: '2px solid',
        borderRadius: '6px',
        padding: '2px',
        backgroundColor: 'black',
    };
})(Tip = exports.Tip || (exports.Tip = {}));
/**
 * For when you don't want anything on focus
 */
exports.noFocusOutlineBase = {
    "&:focus": {
        outline: 'none'
    }
};
/**
 * When you want text ellipsis
 * Note: whitespace no wrap is significant
 * Note: you probably want a limited width on the parent
 */
exports.ellipsis = {
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
};
