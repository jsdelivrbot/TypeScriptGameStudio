"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ui_1 = require("../ui");
var pure = require("../../common/pure");
var Icon = (function (_super) {
    __extends(Icon, _super);
    function Icon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Icon.prototype.shouldComponentUpdate = function () {
        return pure.shouldComponentUpdate.apply(this, arguments);
    };
    Icon.prototype.render = function () {
        var _a = this.props, name = _a.name, size = _a.size, rotate = _a.rotate, flip = _a.flip, spin = _a.spin, fixedWidth = _a.fixedWidth, stack = _a.stack, inverse = _a.inverse, pulse = _a.pulse, className = _a.className, style = _a.style;
        var props = this.props;
        var classNames = "fa fa-" + name;
        if (size) {
            classNames = classNames + " fa-" + size;
        }
        if (rotate) {
            classNames = classNames + " fa-rotate-" + rotate;
        }
        if (flip) {
            classNames = classNames + " fa-flip-" + flip;
        }
        if (fixedWidth) {
            classNames = classNames + " fa-fw";
        }
        if (spin) {
            classNames = classNames + " fa-spin";
        }
        if (pulse) {
            classNames = classNames + " fa-pulse";
        }
        if (stack) {
            classNames = classNames + " fa-stack-" + stack;
        }
        if (inverse) {
            classNames = classNames + " fa-inverse";
        }
        if (className) {
            classNames = classNames + " " + className;
        }
        return (React.createElement("i", { className: classNames, style: style }));
    };
    return Icon;
}(ui_1.BaseComponent));
exports.Icon = Icon;
