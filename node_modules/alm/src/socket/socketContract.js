"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var socketLib_1 = require("../socketLib/socketLib");
/**
 * Consists of the following contracts
 *
 * a contract on how the client --calls--> server
 * a contract on how the server --calls--> the client that is calling the server
 * a contract on how the server --anycasts-> all clients
 */
exports.server = {
    echo: {},
    filePaths: {},
    makeAbsolute: {},
    /**
     * File stuff
     */
    openFile: {},
    closeFile: {},
    editFile: {},
    saveFile: {},
    getFileStatus: {},
    /** File Tree */
    addFile: {},
    addFolder: {},
    deleteFromDisk: {},
    duplicateFile: {},
    duplicateDir: {},
    movePath: {},
    launchDirectory: {},
    launchTerminal: {},
    /**
     * config stuff
     */
    availableProjects: {},
    getActiveProjectConfigDetails: {},
    setActiveProjectConfigDetails: {},
    isFilePathInActiveProject: {},
    setOpenUITabs: {},
    getOpenUITabs: {},
    activeProjectFilePaths: {},
    sync: {},
    setSetting: {},
    getSetting: {},
    getValidSessionId: {},
    /**
     * Error stuff
     */
    getErrors: {},
    /**
     * Tested
     */
    getTestResults: {},
    /**
     * Project Service
     */
    getCompletionsAtPosition: {},
    getCompletionEntryDetails: {},
    quickInfo: {},
    getRenameInfo: {},
    getDefinitionsAtPosition: {},
    getReferences: {},
    getDoctorInfo: {},
    formatDocument: {},
    formatDocumentRange: {},
    getNavigateToItems: {},
    getNavigateToItemsForFilePath: {},
    getDependencies: {},
    getAST: {},
    getQuickFixes: {},
    applyQuickFix: {},
    getSemanticTree: {},
    getOccurrencesAtPosition: {},
    getFormattingEditsAfterKeystroke: {},
    removeUnusedImports: {},
    /**
     * Documentation Browser
     */
    getTopLevelModuleNames: {},
    getUpdatedModuleInformation: {},
    /** UML Diagram */
    getUmlDiagramForFile: {},
    /** tsFlow */
    getFlowRoots: {},
    /** live analysis */
    getLiveAnalysis: {},
    /**
     * Output Status
     */
    getCompleteOutputStatusCache: {},
    getLiveBuildResults: {},
    build: {},
    getJSOutputStatus: {},
    /**
     * Live demo
     */
    enableLiveDemo: {},
    disableLiveDemo: {},
    enableLiveDemoReact: {},
    disableLiveDemoReact: {},
    /**
     * Git service
     */
    gitStatus: {},
    gitReset: {},
    gitDiff: {},
    gitAddAllCommitAndPush: {},
    gitFetchLatestAndRebase: {},
    /**
     * NPM Service
     */
    npmLatest: {},
    /**
     * FARM
     */
    startFarming: {},
    stopFarmingIfRunning: {},
    farmResults: {},
    /**
     * Config creator
     */
    createEditorconfig: {},
    /**
     * Settings
     */
    getSettingsFilePath: {},
    /**
     * Server Disk Service
     */
    getDirItems: {},
};
exports.client = {
    increment: {},
};
exports.cast = {
    /** for testing */
    hello: new socketLib_1.TypedEvent(),
    /** If the file worker notices a change */
    filePathsUpdated: new socketLib_1.TypedEvent(),
    /** If an open and already saved file changes on disk  */
    savedFileChangedOnDisk: new socketLib_1.TypedEvent(),
    /** If a user does a code edit */
    didEdits: new socketLib_1.TypedEvent(),
    /** If any of the file status changes */
    didStatusChange: new socketLib_1.TypedEvent(),
    /** If file editor options change */
    editorOptionsChanged: new socketLib_1.TypedEvent(),
    /** Errors for a file path */
    errorsDelta: new socketLib_1.TypedEvent(),
    /** Tested */
    testResultsDelta: new socketLib_1.TypedEvent(),
    testedWorking: new socketLib_1.TypedEvent(),
    /** TS analysis taking place */
    tsWorking: new socketLib_1.TypedEvent(),
    /** Available projects updated */
    availableProjectsUpdated: new socketLib_1.TypedEvent(),
    /** Active project name updated */
    activeProjectConfigDetailsUpdated: new socketLib_1.TypedEvent(),
    /** Active project files */
    activeProjectFilePathsUpdated: new socketLib_1.TypedEvent(),
    /** FARM */
    farmResultsUpdated: new socketLib_1.TypedEvent(),
    /** JS Ouput status  */
    fileOutputStatusUpdated: new socketLib_1.TypedEvent(),
    completeOutputStatusCacheUpdated: new socketLib_1.TypedEvent(),
    liveBuildResults: new socketLib_1.TypedEvent(),
    /** Live demo */
    liveDemoData: new socketLib_1.TypedEvent(),
    liveDemoBuildComplete: new socketLib_1.TypedEvent(),
    /** Server quit */
    serverExiting: new socketLib_1.TypedEvent(),
};
/**
 * General utility interfaces
 */
var Types;
(function (Types) {
    /**
     * AST View
     */
    var ASTMode;
    (function (ASTMode) {
        /** ts.forEachChild() */
        ASTMode[ASTMode["visitor"] = 0] = "visitor";
        /** node.getChildren() */
        ASTMode[ASTMode["children"] = 1] = "children";
    })(ASTMode = Types.ASTMode || (Types.ASTMode = {}));
})(Types = exports.Types || (exports.Types = {}));
